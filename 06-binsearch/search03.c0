bool is_in(int x, int[] A, int lower, int upper)
//@requires lower >= 0 && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i<upper; i++)
    //@loop_invariant i>=lower && i<=upper;
    if (A[i] == x) return true;
  return false;
}

bool is_sorted(int[] A, int lower, int upper)
//@requires lower>=0 && lower<=upper && upper<=\length(A);
{
  for (int i=lower; i<upper-1; i++)
    //@loop_invariant i>=lower;
    if (A[i]>A[i+1]) return false;
  return true;
}

int get_first(int x, int[] A, int n)
{
    int left = 0;
    int right = n - 1;
    int result = -1; // 用于记录第一个出现的位置

    while (left <= right)
    {
        int mid = left + (right - left) / 2;

        if (A[mid] == x)
        {
            result = mid; // 更新位置
            right = mid - 1; // 继续搜索左侧
        }
        else if (A[mid] < x)
        {
            left = mid + 1;
        }
        else
        {
            right = mid - 1;
        }
    }

    return result;
}


int search(int x, int[] A, int n)
//@requires n >= 0 && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result == -1 && !is_in(x, A, 0, n))
      || (\result >= 0 && \result < n && A[\result] == x && !is_in(x, A, 0, \result));
@*/
{
  int lower = 0;
  int upper = n;
  bool flag = false;
  while (lower < upper)
    //@loop_invariant lower >=0 && lower<=upper && upper<=n;
    //@loop_invariant is_in(x, A, lower, upper) || !is_in(x, A, 0, n);
    //@loop_invariant lower <= get_first(x, A) <= upper;
    {
      int mid = lower + (upper - lower) / 2;
      //@assert lower<=mid && mid<=upper;
      if (A[mid] == x)
        {
          upper = mid; // 继续搜索左侧
          flag = true; // 标记成功
        }
      else if (A[mid] < x)
        lower = mid + 1;
      else
        upper = mid;
    }

  return flag ? lower : -1;
}
