/*
 * Peg solitaire solver
 *
 * 15-122 Principles of Imperative Computation */

#use <args>
#use <conio>
#use <util>

// index of the peg, removed peg, hole
typedef int[] move;

int row_start(move m)
{
    return m[0]/8;
}

int col_start(move m)
{
    return m[0]%8;
}

int row_end(move m){
    return m[2]/8;
}

int col_end(move m)
{
    return m[2]%8;
}

bool is_valid_move(board B, move m)
//@requires is_board(B);
{
    // peg->peg->hole && same row or col && near
    if(B[m[0]]==1 && B[m[1]]==1 && B[m[2]]==0
        &&( (row_start(m) == row_end(m) && abs(col_start(m)-col_end(m)) == 2) 
        || (col_start(m) == col_end(m) && abs(row_start(m)-row_end(m)) == 2) ))
    {
        return true;
    }else{
        return false;
    }
}

void excute_move(board B, move m)
//@requires is_board(B);
//@requires is_valid_move(B, m);
{
    B[m[0]]=0;
    B[m[1]]=0;
    B[m[2]]=1;
}

void undo_move(board B, move m)
//@requires is_board(B);
//@ensures is_valid_move(B, m);
{
    B[m[0]]=1;
    B[m[1]]=1;
    B[m[2]]=0;
}

void find_valid_moves(board B, stack S)
//@requires is_board(B);
//@requires stack_empty(S);
{
    for(int i=0; i<8*8; i++)
    {
        for(int j=i+2; j<8*8; j=j+2)
        {
            move m=alloc_array(int, 3);
            m[0] = i;
            m[1] = (i+j)/2;
            m[2] = j;
            if(is_valid_move(B, m)){
                push(S, m);
            }
        }
    }
}

int solve(board B, stack S)
//@requires is_board(B);
//@requires num_pegs(B) >= 1;
//@ensures is_board(B);
//@ensures \result >= 1;
{
    if(num_pegs(B)==1){
        return 1;
    }

    // find all valid moves
    stack moves = stack_new();
    find_valid_moves(B, moves);
    // if no valid moves, return num of left pegs. end of recursivation
    if(stack_empty(moves)){
        return num_pegs(B);
    }

    int min_num = 8*8;

    while(!stack_empty(moves))
    {
        move m = pop(moves);
        push(S, m);
        excute_move(B, m);
        // recursively solve
        int next_solve = solve(B, S);
        // push only when find solution
        if(next_solve==1){
            return 1;
        }else{
            // if else, undo the move
            undo_move(B, m);
        }
        if(next_solve < min_num){
            min_num = next_solve;
        }else{
            pop(S);
        }
    }

    return min_num;
}

int peg_solve(board B, stack S)
//@requires is_board(B);
//@requires num_pegs(B) >= 1;
//@requires stack_empty(S);
//@ensures is_board(B);
//@ensures \result >= 1;
{
    return solve(B, S);
}
