bool all_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
    for(int i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i;
    {
        if(string_compare(A[i+1], A[i]) == 0) return false;
    }
    return true;
}

int count_distinct(string[] A, int n)
//@requires 0 <= n&& n <= \length(A);
//@requires is_sorted(A, 0, n);
{
    if (n == 0) return 0;

    int count = 1;
    for(int i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i;
    {
        if(string_compare(A[i+1], A[i]) != 0) count++;
    }
    return count;
}

string[] remove_duplicates(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures all_distinct(\result,\length(\result))
        && count_distinct(A,n) == \length(\result); @*/
{
    string[] result = alloc_array(string, n);
    if (n == 0) return result;

    int result_length = 1;
    result[0] = A[0];

    for(int i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i;
    {
        if(string_compare(A[i+1], A[i]) != 0)
        {
            result[result_length] = A[i+1];
            result_length++;
        }
    }

    return result;
}
